{"version":3,"sources":["serviceWorker.js","components/Header.js","baseUrl.js","components/Functions.js","components/Cards.js","components/Main.js","components/Footer.js","index.js","components/Flat.js","components/Seller.js"],"names":["Boolean","window","location","hostname","match","Header","className","href","baseUrl","Loading","type","color","height","width","addToFavorite","id","storeFavorite","JSON","parse","localStorage","getItem","includes","favorites","push","setItem","stringify","document","querySelector","classList","add","err","console","log","deleteFavorite","filter","item","remove","Cards","data","useContext","cardsContext","favoriteFromStore","length","map","flat","Card","key","attributes","title","CardContent","src","alt","CardActions","IconButton","aria-label","onClick","contains","area","unit","rooms","Button","size","to","createContext","Main","useState","ready","setReady","setData","cards","useEffect","fetch","then","res","status","json","catch","Provider","value","Footer","ReactDOM","render","StrictMode","exact","path","component","history","setFlat","params","goBack","Object","keys","address","city","street","house","room","relationships","last_name","first_name","middle_name","seller","setSeller","getElementById","navigator","serviceWorker","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.62a5df57.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nfunction Header() {\n  return(\n    <header className=\"header\">\n      <a href=\"/\">\n        <h1>Here should be some titile</h1>\n      </a>\n    </header>\n  )\n}\n\nexport default Header;","export const baseUrl = 'http://192.168.1.113:3001';","import React from 'react';\nimport Loader from 'react-loader-spinner';\n\n\nexport const Loading = () => {\n  return <div className='info'>\n    <Loader type=\"Oval\" color=\"#2C3E50\" height={80} width={80} className=\"loader\" />\n    <p>Loading</p>\n  </div>\n}\n\n\nexport const addToFavorite = (id) => {\n  try {\n    let storeFavorite = JSON.parse(localStorage.getItem('flat_task_favorite') );\n\n    if(!storeFavorite) {\n      let favorites = [];\n      favorites[0] = id;\n      localStorage.setItem(\"flat_task_favorite\", JSON.stringify(favorites));\n    }\n    else if(!storeFavorite.includes(id)){\n      let favorites = storeFavorite;\n      favorites.push(id);\n      localStorage.setItem(\"flat_task_favorite\", JSON.stringify(favorites));\n    }\n    document.querySelector('#id' + id).classList.add('favorite');\n\n  }\n  catch (err) {\n    console.log('No cookies allowed')\n  }\n}\n\nexport const deleteFavorite = (id) => {  \n  try {\n    let storeFavorite = JSON.parse(localStorage.getItem('flat_task_favorite') );\n\n    if(!storeFavorite) {\n      return\n    }\n    else if(storeFavorite.includes(id)){      \n      let favorites = storeFavorite.filter( item => item !== id);\n      localStorage.setItem(\"flat_task_favorite\", JSON.stringify(favorites));\n      document.querySelector('#id' + id).classList.remove('favorite');\n    }\n  }\n  catch (err) {\n    console.log('No cookies allowed')\n  }\n}","import React, { useContext } from 'react';\nimport { Link } from 'react-router-dom'\nimport { Card, CardContent, CardActions, IconButton } from '@material-ui/core';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport Button from '@material-ui/core/Button';\n\nimport { cardsContext } from './Main';\nimport { addToFavorite, deleteFavorite} from './Functions';\n\n\n\nconst Cards = () => {\n  const { data } = useContext(cardsContext);\n  let favoriteFromStore = [];\n\n  try {\n    let storeFavorite = JSON.parse(localStorage.getItem('flat_task_favorite') );\n      \n\t  if(storeFavorite && storeFavorite.length > 0) {\n\t\t  favoriteFromStore =  storeFavorite;\n\t\t}\n\t}\n\tcatch(err) {\n\t\tconsole.log(\"Cookies are not allowed\")\n  }\n  \n\n\n  return (\n    data.length < 1 ? \n    <div className=\"info\">Sorry, no information was found</div> :\n    <section className=\"cards\">\n      {\n        data.map( flat => {\n          return(\n            <Card className='flat-card' key={ flat.id }>\n              <h2 className=\"flat-title\">{ flat.attributes.title }</h2>\n\n              <CardContent>\n                <img src=\"/images/flat.jpeg\"  className='flat-img' alt={ flat.attributes.title } />\n                \n                <CardActions className=\"flat-footer\">\n                <IconButton aria-label=\"add to favorites\"\n                  className={ favoriteFromStore.includes(flat.id) ? \"favorite\" : null }\n                  id={\"id\" + flat.id}\n                  onClick={ () =>  document.querySelector('#id' + flat.id).classList.contains(\"favorite\") ? deleteFavorite(flat.id) : addToFavorite(flat.id) }>\n                  <FavoriteIcon />\n                </IconButton>\n\n                <div className=\"flat-info\">\n                  <span>Площадь: { flat.attributes.area } {flat.attributes.unit}</span>\n                  <span>Комнат: { flat.attributes.rooms }</span>\n                </div>\n                </CardActions>                \n              </CardContent>\n\n              <Button size=\"small\" color=\"primary\" >\n                <Link to={ '/flat/' + flat.id }>\n                  Детали\n                </Link>\n              </Button>\n            </Card>\n          )\n        })\n      }\n    </section>\n  );\n}\n\nexport default Cards;","import React, { useState, useEffect, createContext } from 'react';\n\nimport { baseUrl } from '../baseUrl';\nimport Cards from './Cards';\nimport { Loading } from './Functions';\n\n\n\nexport const cardsContext = createContext(null);\n\n\n\n\nfunction Main() {\n\n  const [ready, setReady] = useState(false);\n  const [data, setData] = useState([]);\n  const cards = { data };\n\n\n  useEffect( () => {\n    fetch(baseUrl + \"/response\")\n    .then( res => {\n      if(res.status !== 200) return []\n      return res.json();\n    })\n    .then (res => {      \n      setData(res);\n      setReady(true);\n    })\n    .catch( err => {\n      console.log(\"Some error was happened\");\n    })\n  }, []);\n\n  return (\n    <cardsContext.Provider value={ cards }>\n      <main className=\"main\">\n        {\n          ready ? <Cards /> : <Loading />\n        }\n      </main>\n    </cardsContext.Provider>\n  );\n}\n\nexport default Main;","import React from 'react';\n\nfunction Footer() {\n  return (\n    <footer className=\"footer center-text\">\n      &#169; everebody likes to put some text here\n    </footer>\n  );\n}\n\nexport default Footer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Redirect, Route, Switch } from 'react-router-dom';\nimport './styles/main.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport Header from './components/Header';\nimport Main from './components/Main';\nimport { Flat } from './components/Flat';\nimport { Seller } from './components/Seller';\nimport Footer  from './components/Footer';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Header />\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/\" component={ Main } />\n        <Route path=\"/flat/:id\" component={ Flat } />\n        <Route path=\"/seller/:id\" component={ Seller } />\n        <Redirect to='/' />\n      </Switch>\n    </BrowserRouter>\n    <Footer />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n","import React, { useState, useEffect }from 'react';\nimport Button from '@material-ui/core/Button';\nimport { IconButton } from '@material-ui/core';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\n\nimport { baseUrl } from '../baseUrl';\nimport { Loading } from './Functions';\nimport { addToFavorite, deleteFavorite} from './Functions';\n\n\n\nexport const Flat = ({ match, history }) => {\n  const [ready, setReady] = useState(false);\n  const [flat, setFlat] = useState({});\n\n  let favoriteFromStore = [];\n  try {\n    let storeFavorite = JSON.parse(localStorage.getItem('flat_task_favorite') );\n      \n\t  if(storeFavorite && storeFavorite.length > 0) {\n\t\t  favoriteFromStore =  storeFavorite;\n\t\t}\n\t}\n\tcatch(err) {\n\t\tconsole.log(\"Cookies are not allowed\")\n  }\n\n  useEffect( () => {\n    fetch(baseUrl + \"/response/\" + match.params.id)\n    .then( res => {\n      if(res.status !== 200) return {}\n      return res.json();\n    })\n    .then (res => {      \n      setFlat(res);\n      setReady(true);\n    })\n    .catch( err => {\n      console.log(\"Some error was happened\");\n    })\n  }, [match.params.id]);\n\n  return (    \n    <div>\n      <Button size=\"small\" color=\"primary\" onClick={ () => history.goBack()}> Назад  </Button>\n\n      <div className=\"main\">\n      {\n        !ready ?\n        <Loading /> :\n        Object.keys(flat).length === 0 ? \n        <div className=\"info\">Sorry, no information was found</div> :\n        <div>\n          <h2 className=\"center-text\">{ flat.attributes.title }</h2>\n\n          <div className=\"detail\">\n            <img src=\"/images/flat.jpeg\"  className='flat-img' alt={ flat.attributes.title } />\n\n            <div className=\"detail-info\">\n              <IconButton aria-label=\"add to favorites\"\n                className={ favoriteFromStore.includes(flat.id) ? \"favorite\" : null }\n                id={\"id\" + flat.id}\n                onClick={ () =>  document.querySelector('#id' + flat.id).classList.contains(\"favorite\") ? deleteFavorite(flat.id) : addToFavorite(flat.id) }>\n                <FavoriteIcon />\n              </IconButton>\n              <span>Тип: { flat.type }</span>\n              <span>Количество комнат: { flat.attributes.rooms }</span>\n              <span>Площадь: { flat.attributes.area } { flat.attributes.unit }</span>\n              <span>Адрес: { flat.attributes.address.city }, { flat.attributes.address.street }, { flat.attributes.address.house }/{ flat.attributes.address.room }</span>\n\n              <br />\n\n              <span>\n                <a href={ \"/seller/\" + flat.relationships.id }>\n                  { flat.relationships.attributes.last_name } { flat.relationships.attributes.first_name } { flat.relationships.attributes.middle_name }\n                </a>\n              </span>\n            </div>\n          </div>\n        </div>\n      }\n      </div>\n    </div>\n\n  );\n}\n\n\n","import React, { useState, useEffect } from 'react';\nimport Button from '@material-ui/core/Button';\n\nimport { Loading } from './Functions';\nimport { baseUrl } from '../baseUrl';\n\n\n\nexport const Seller = ({ match, history }) => {\n  const [ready, setReady] = useState(false);\n  const [seller, setSeller] = useState({});\n\n  useEffect( () => {\n    fetch(baseUrl + \"/response?relationships.id=\" + match.params.id)\n    .then( res => {\n      if(res.status !== 200) return [null]\n      return res.json();\n    })\n    .then (res => {      \n      setSeller(res[0]);\n      setReady(true);\n    })\n    .catch( err => {\n      console.log(\"Some error was happened\");\n    })\n  }, [match.params.id]);\n\n  console.log(seller)\n  \n  return (\n    <div className=\"seller\">\n      <Button size=\"small\" color=\"primary\" onClick={ () => history.goBack()}> Назад  </Button>\n\n      { \n        !ready ?\n        <Loading /> :\n        !seller ? \n        <div className=\"info\">Sorry, no information was found</div> :\n        <div className=\"detail\">\n          <div className=\"detail-info center-text\">            \n            <span>\n              { seller.relationships.attributes.last_name } { seller.relationships.attributes.first_name } { seller.relationships.attributes.middle_name }\n            </span>\n            <span>Статус продавца: { seller.relationships.type }</span>\n            <img src=\"/images/realtor.png\"  className='realtor-img' alt={ seller.relationships.attributes.last_name } />\n          </div>\n        </div>\n      }\n    </div>\n  );\n}\n"],"sourceRoot":""}